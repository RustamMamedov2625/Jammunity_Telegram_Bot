// SecurityService.java
package com.telegrambot.telegrambotjammunity.service;

import com.telegrambot.telegrambotjammunity.entity.User;
import com.telegrambot.telegrambotjammunity.repository.UserRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import java.time.LocalDateTime;
import java.util.concurrent.ConcurrentHashMap;

@Slf4j
@Service
public class SecurityService {

    private final UserRepository userRepository;
    private final ConcurrentHashMap<Long, Integer> userInviteLimits = new ConcurrentHashMap<>();
    private final ConcurrentHashMap<Long, LocalDateTime> userLastInvite = new ConcurrentHashMap<>();

    // –õ–∏–º–∏—Ç—ã: –º–∞–∫—Å–∏–º—É–º 5 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –¥–µ–Ω—å
    private static final int DAILY_INVITE_LIMIT = 5;

    public SecurityService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    /**
     * –ü–†–û–í–ï–†–Ø–ï–¢ –ú–û–ñ–ï–¢ –õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –°–û–ó–î–ê–¢–¨ –ï–©–ï –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï
     */
    public boolean canCreateInvite(User user) {
        Long userId = user.getTelegramId();
        LocalDateTime now = LocalDateTime.now();

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å
        LocalDateTime lastInvite = userLastInvite.get(userId);
        if (lastInvite != null && lastInvite.plusDays(1).isBefore(now)) {
            userInviteLimits.remove(userId);
            userLastInvite.remove(userId);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        int currentCount = userInviteLimits.getOrDefault(userId, 0);
        if (currentCount >= DAILY_INVITE_LIMIT) {
            log.warn("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", user.getUsername());
            return false;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        userInviteLimits.put(userId, currentCount + 1);
        userLastInvite.put(userId, now);
        return true;
    }

    /**
     * –ü–û–õ–£–ß–ê–ï–¢ –¶–ï–ü–û–ß–ö–£ –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ô –î–õ–Ø –ê–î–ú–ò–ù–ê
     */
    public String getInvitationChain(Long userId) {
        StringBuilder chain = new StringBuilder();
        User currentUser = userRepository.findById(userId).orElse(null);

        if (currentUser == null) {
            return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
        }

        chain.append("üîó –¶–µ–ø–æ—á–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:\n\n");
        chain.append(getUserInfo(currentUser)).append(" üëà –¢–µ–∫—É—â–∏–π\n");

        User inviter = currentUser.getInvitedBy();
        int level = 1;

        while (inviter != null) {
            chain.append("‚¨ÜÔ∏è –£—Ä–æ–≤–µ–Ω—å ").append(level).append(": ")
                    .append(getUserInfo(inviter)).append("\n");
            inviter = inviter.getInvitedBy();
            level++;
        }

        return chain.toString();
    }

    private String getUserInfo(User user) {
        return String.format("@%s (%s %s)",
                user.getUsername() != null ? user.getUsername() : "–Ω–µ—Ç username",
                user.getFirstName() != null ? user.getFirstName() : "",
                user.getLastName() != null ? user.getLastName() : "");
    }
}